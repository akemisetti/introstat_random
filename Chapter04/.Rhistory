pchisq(q= 1.3121, df = 4, lower.tail = FALSE)
2 + 4
my_numeric <- 42.5
myvec <- ("Wes", "Fisher", 1982)
myvec <- c("Wes", "Fisher", 1982)
class(myvec)
myvec[3]
x <- c("My Name", "My address is here at 123 Street", 1999)
x
x <- 1:100
x * 5
x <- 1:100
x * 5
x <- 1:100
x <- 5
y <- 7
x * y
x / y
x + y
x - y
z <- x * y
z
x <- sample(1:20, 1, replace=FALSE)
x
y <- sample(c("a", "b", "c", "d", "e", "f", "g"), 1)
y
y <- sample(c("a", "b", "c", "d", "e", "f", "g"), 1)
y
y <- sample(c("a", "b", "c", "d", "e", "f", "g"), 1)
y
coin_flips <- sample(c("H", "T"), 20, replace = TRUE)
coin_flips
coin_flips2 <- sample(c(0, 1), 20, replace = TRUE)   # let the 1s be Heads
coin_flips
coin_flips2
sum(coin_flips2)
20 - sum(coin_flips2)
length(coin_flips2) - sum(coin_flips2)
coin_flips2 <- sample(c(0, 1), 20, replace = TRUE)   # let the 1s be Heads
coin_flips2
cases <- c( rep(1, 35), rep(0, 13 )
cases <- c( rep(1, 35), rep(0, 13) )
cases <- c( rep(1, 35), rep(0, 13) )
cases
length(cases)
sum(cases)
sample(cases, 24, replace=FALSE)
trial1 <- sample(cases, 24, replace=FALSE)
sum(trial1) / length(trial1)
sum(cases)
sum(cases) - sum(trial1)
females <- sum(trial1) / length(trial1)
males <- ( sum(cases) - sum(trial1) ) / length(trial1)
females; males;
result <- males - females
result
for(j in 1:1000) {
trial <- sample(cases, 24, replace=FALSE)
females <- sum(trial) / length(trial)
males <- ( sum(cases) - sum(trial) ) / length(trial)
results[j] <- males - females
}
results <- rep(0, 1000)
for(j in 1:1000) {
trial <- sample(cases, 24, replace=FALSE)
females <- sum(trial) / length(trial)
males <- ( sum(cases) - sum(trial) ) / length(trial)
results[j] <- males - females
}
results
hist(results)
results >= 0.291
sum( results >= 0.291 )
results == "your face"
results > 100000
results >= 0.291
sum( results >= 0.291 )
cases <- c( rep(1, 97), rep(0, 53) )
sum(cases)
cases
control <- samples(cases, 75, replace=FALSE)
cases <- c( rep(1, 97), rep(0, 53) )
cases <- c( rep(1, 97), rep(0, 53) )
control <- sample(cases, 75, replace=FALSE)
control
control <- sum( sample(cases, 75, replace=FALSE) )
treatment <- sum(cases) - control
contorl
control
treatment
result <- (treatment - control) / 75
result
results <- rep(0, 10000)
for(j in 1:10000) {
control <- sum( sample(cases, 75, replace=FALSE) )
treatment <- sum(cases) - control
results[j] <- (treatment - control) / 75
}
hist(results)
sum (results >= 0.200 )
82/10000 * 2
82/10000
x <- c(1, 2, 3, 4, 5)
x
class(x)
x <- c(1, 2, 3, 4, 5, "six")
x
x <- c(820, 880, 875, 820)
mean(x)
sd(x)
median(x)
?seq
?sample
choose(49, 6)
1/choose(49,6)
1/700000
700000/choose(49,6)
(700000/choose(49,6))^(-1)
cars
str(cars)
mean(x)
knitr::opts_chunk$set(echo = TRUE)
mean(x)
install.packages("devtools")
require("devtools")
install_version("backports", version = 1.1.0)
install_version("backports", version = "1.1.0")
x <- c(884, 918, 946, 858, 874, 879, 917, 888, 878, 865, 944, 862, 945, 913, 904
)
x
mean(x)
median(x)
var(x)
quantile(x, probs = c(0.25, 0.75))
917.5 - 876.0
888+41
x <- c(1000, 600, 126200, 200)
mean(x)
median(x)
1-0.341
0.327+0.201+0.073
0.011+1.96*0.0497
0.01101.96*0.0497
0.011-1.96*0.0497
2 * pnorm(-0.22)
pnorm(-0.22)
/CPR
?digit
?digits
?print
?round
?round
x <- c(1, 2, 3, 4, 5)
y1 <- c(2, 4, 6, 8, 10)
y2 <- c(2, 4, 6, 9, 13)
plot(x, y1, col = "red")
points(x, y2, col = "blue")
plot(x, y1, col = "red", ylim = c(0, 14))
points(x, y2, col = "blue")
plot(x, y1, col = "red", ylim = c(0, 14), type = "l")
lines(x, y2, col = "blue")
?sample
set.seed(1)
results <- vector(length = 100000)
for(j in 1:100000) {
experiment <- sample(x = patients, size = 40)
results[j] <- sum(experiment) / 40 - (25 - sum(experiment))/50
}
hist(results, freq = TRUE, xlab = "Simulated Difference in Proportions", ylab = "Proportion of simulated scenarios", main = "", breaks = seq(-0.44, 0.44, 0.04), yaxt = 'n')
axis(2, at = seq(0, 20000, 1000), labels = format(seq(0, 20000, 1000) / 100000))
lines(c(0.13, 0.13), c(0, 10000), lty = 3, lwd = 3)
text(0.18, 10000, "observed\ndifference", pos=3)
set.seed(1)
patients <- c( rep(1, 11), rep(0, 39), rep(1, 14), rep(0, 26) )
results <- vector(length = 100000)
for(j in 1:100000) {
experiment <- sample(x = patients, size = 40)
results[j] <- sum(experiment) / 40 - (25 - sum(experiment))/50
}
hist(results, freq = TRUE, xlab = "Simulated Difference in Proportions", ylab = "Proportion of simulated scenarios", main = "", breaks = seq(-0.44, 0.44, 0.04), yaxt = 'n')
axis(2, at = seq(0, 20000, 1000), labels = format(seq(0, 20000, 1000) / 100000))
lines(c(0.13, 0.13), c(0, 10000), lty = 3, lwd = 3)
text(0.18, 10000, "observed\ndifference", pos=3)
dead_results<-vector(length=100000)
for(h in 1:100000){
bag_o_dead <- c(rep(1,25), rep(0,65))
Experiment <- sample(bag_o_dead,size = 40, replace = FALSE)
treatment <- length(Experiment[Experiment == 1])
control <- 25 - treatment
dead_results[h] <-treatment/40 - >control/50
}
hist(dead_results, freq = TRUE, xlab = "Simulated Difference in Proportions", ylab = "Proportion of simulated scenarios", main = "", breaks = seq(-0.44, 0.44, 0.04), yaxt = 'n')
axis(2, at = seq(0, 20000, 1000), labels = format(seq(0, 20000, 1000) / 100000))
lines(c(0.13, 0.13), c(0, 10000), lty = 3, lwd = 3)
text(0.18, 10000, "observed\ndifference", pos=3)
dead_results<-vector(length=100000)
for(h in 1:100000) {
bag_o_dead <- c(rep(1,25), rep(0,65))
Experiment <- sample(bag_o_dead, size = 40, replace = FALSE)
treatment <- length(Experiment[Experiment == 1])
control <- 25 - treatment
dead_results[h] <- treatment/40 - control/50
}
hist(dead_results, freq = TRUE, xlab = "Simulated Difference in Proportions", ylab = "Proportion of simulated scenarios", main = "", breaks = seq(-0.44, 0.44, 0.04), yaxt = 'n')
axis(2, at = seq(0, 20000, 1000), labels = format(seq(0, 20000, 1000) / 100000))
lines(c(0.13, 0.13), c(0, 10000), lty = 3, lwd = 3)
text(0.18, 10000, "observed\ndifference", pos=3)
mean(results)
mean(dead_results)
length(which(results >= 0.13))
length(which(dead_results >= 0.13))
length(which(dead_results >= 0.13))
length(which(dead_results > 0.1299))
length(which(dead_results > 0.1299 & dead_results <= 0.13))
14/40 - 11/50
dead_results[dead_results > 0.1299 & dead_results <= 0.13]
dead_results[dead_results > 0.1299 & dead_results <= 0.13][1:10]
print(dead_results[dead_results > 0.1299 & dead_results <= 0.13][1:10], digits = 10)
plot(1:100)
?axis
length(seq(1, 50, 4))
str(x2)
knitr::opts_chunk$set(echo = TRUE)
x2 <- paste0("A", 1:50)
x2[-seq(1, 50, 4)] <- ""
x2
x2
x2 <- paste0("A", 1:50)
x2[-seq(1, 50, 4)] <- ""
plot(1:50, y, xaxt = 'n')
?lend
??lend
?plot
t <- data.frame(X = c(1, 2, 3), Y = ("a", "b", "c"), Z = (TRUE, TRUE, FALSE))
t <- data.frame(X = c(1, 2, 3), Y = ("a", "b", "c"), Z = (TRUE, TRUE, FALSE))
t <- data.frame(X = c(1, 2, 3),
Y = c("a", "b", "c"),
Z = c(TRUE, TRUE, FALSE))
x <- matrix(data = 1:12, nrow = 4, ncol = 3)
x
y <- as.data.frame(x)
y
names(y) <- c("X", "Y", "Z")
y
y$Z
?console
?text
1176/sqrt(10)
1836/371.8839
babynames <- read.csv("~/m1051/Workshop/Workshop07/Workshop07_Work/babynames_England.csv", stringsAsFactors=FALSE)
View(babynames)
/Practice
140/250
sqrt(0.5*0.5/250)
(0.56-0.5)/0.03162278
prop.test(140, 250, correct=FALSE)
1.8974^2
qnorm(0.95)
qnorm(0.975)
0.56 - 1.959964 * 0.031623
0.56 + 1.959964 * 0.031623
0.56 - qnorm(0.95) * 0.031623
0.56 + qnorm(0.95) * 0.031623
prop.test(140, 250, correct=FALSE)
prop.test(140, 250, correct=FALSE, alternative = "greater")
0.56 + 1.959964 * 0.031623
0.56 - 1.959964 * 0.031623
0.56 - qnorm(0.95) * 0.031623
0.56 _ qnorm(0.95) * 0.031623
0.56 + qnorm(0.95) * 0.031623
?prop.test
qnorm(0.95)
qnorm(0.025)
qnorm(0.975)
0.63*0.37/1005
0.79*0.21/1504
sqrt(0.63*0.37/1005+0.79*0.21/1504 )
qnorm(0.975)
(633/1005 - 1188/1504)
sqrt(0.7258*(1-0.7258) * (1/1005 + 1/1504))
t <- (633/1005 - 1188/1504)
t/sqrt(0.7258*(1-0.7258) * (1/1005 + 1/1504))
yes1 <- 633
yes2 <- 1188
n1 <- 1005
n2 <- 1504
phat1 <- yes1/n2
#
#  Chapter 3.3, Labby Dice example
#
dat <- c(53222, 52118, 52465, 52338, 52244, 53285)
sum(dat)
#
#  Chapter 3.4,
#
dat2 <- c(63, 31, 25, 88, 55, 33, 96, 55, 32)
dat2_mat <- matrix(data = dat2, nrow = 3, ncol = 3, byrow = TRUE)
dat2_mat
i
?apply
var1_totals <- apply(dat2_mat, MARGIN = 1, FUN = sum)
var1_totals
var2_totals <- apply(dat2_mat, MARGIN = 2, FUN = sum)
var2_totals
sim_vector <- c( rep(4, var1_totals[1]),
rep(5, var1_totals[2]),
rep(6, var1_totals[3]))
plot(sim_vector)
length(sim_vector)
sim_vector <- c( rep(4, var1_totals[1]),
rep(5, var1_totals[2]),
rep(6, var1_totals[3]))
randomize <- sample(sim_vector, length(sim_vector), replace = TRUE)
randomize
test <- c(1, 1, 3, 4, 1, 5)
test == 1
which(test == 1)
length(which(test == 1))
247+141
length(248:388)
grades <- randomize[1:var2_totals[1]]
popular <- randomize[(var2_totals[1]+1):(var2_totals[1]+var2_totals[2])]
sports <- randomize[(var2_totals[1]+var2_totals[2]+1):(sum(var2_totals))]
result <- matrix(data = 0, nrow = 3, ncol = 3)
result[1, 1] <- length(which(grades == 4))
result[1, 2] <- length(which(popular == 4))
result[1, 3] <- length(which(sports == 4))
result
56+34+34
var2_totals[1]
var2_totals[2]
var2_totals[3]
length(which(randomize == 4))
randomize <- sample(sim_vector, length(sim_vector), replace = FALSE)
grades <- randomize[1:var2_totals[1]]
popular <- randomize[(var2_totals[1]+1):(var2_totals[1]+var2_totals[2])]
sports <- randomize[(var2_totals[1]+var2_totals[2]+1):(sum(var2_totals))]
result <- matrix(data = 0, nrow = 3, ncol = 3)
result[1, 1] <- length(which(grades == 4))
result[1, 2] <- length(which(popular == 4))
result[1, 3] <- length(which(sports == 4))
result
70+30+19
result <- matrix(data = 0, nrow = 3, ncol = 3)
for(j in 1:3) {
result[j, 1] <- length(which(grades == j+3))
result[j, 2] <- length(which(popular == j+3))
result[j, 3] <- length(which(sports == j+3))
}
result
apply(result, MAR = 1, FUN = sum)
apply(result, MAR = 2, FUN = sum)
#
#  Chapter 3.4,
#
chisq_test <- function(observed) {
stopifnot(class(observed) == "matrix")
nrow <- dim(observed)[1]
ncol <- dim(observed)[2]
if(nrow < 2 | ncol < 2) { stop("This is not a matrix of at least 2x2 size.")}
row_sums <- apply(observed, MAR = 1, sum)
col_sums <- apply(observed, MAR = 2, sum)
grand_total <- sum(row_sums)
augmented_matrix <- matrix(NA, nrow = nrow + 1, ncol = ncol + 1)
augmented_matrix[1:nrow, 1:ncol] <- observed
augmented_matrix[, ncol+1] <- c(row_sums, grand_total)
augmented_matrix[nrow+1, ] <- c(col_sums, grand_total)
expected <- observed
for(i in 1:ncol) {
for(j in 1:nrow) {
expected[j, i] <- augment[j, ncol + 1] * augment[nrow + 1, i] / augment[nrow + 1, ncol + 1]
}
}
chisq_test <- sum((observed - expected)^2 / expected)
df <- (nrow - 1) * (ncol - 1)
return_vec <- c(chisq_test, df)
return(return_vec)
}
chisq_test(rest)
chisq_test(result)
#
#  Chapter 3.4,
#
chisq_test <- function(observed) {
stopifnot(class(observed) == "matrix")
nrow <- dim(observed)[1]
ncol <- dim(observed)[2]
if(nrow < 2 | ncol < 2) { stop("This is not a matrix of at least 2x2 size.")}
row_sums <- apply(observed, MAR = 1, sum)
col_sums <- apply(observed, MAR = 2, sum)
grand_total <- sum(row_sums)
augment <- matrix(NA, nrow = nrow + 1, ncol = ncol + 1)
augment[1:nrow, 1:ncol] <- observed
augment[, ncol+1] <- c(row_sums, grand_total)
augment[nrow+1, ] <- c(col_sums, grand_total)
expected <- observed
for(i in 1:ncol) {
for(j in 1:nrow) {
expected[j, i] <- augment[j, ncol + 1] * augment[nrow + 1, i] / augment[nrow + 1, ncol + 1]
}
}
chisq_test <- sum((observed - expected)^2 / expected)
df <- (nrow - 1) * (ncol - 1)
return_vec <- c(chisq_test, df)
return(return_vec)
}
chisq_test(result)
chisq_test(result)[1]
chisq_res <- vector(length = 10000)
for(i in 1:10000) {
randomize <- sample(sim_vector, length(sim_vector), replace = FALSE)
grades <- randomize[1:var2_totals[1]]
popular <- randomize[(var2_totals[1]+1):(var2_totals[1]+var2_totals[2])]
sports <- randomize[(var2_totals[1]+var2_totals[2]+1):(sum(var2_totals))]
result <- matrix(data = 0, nrow = 3, ncol = 3)
for(j in 1:3) {
result[j, 1] <- length(which(grades == j+3))
result[j, 2] <- length(which(popular == j+3))
result[j, 3] <- length(which(sports == j+3))
}
chisq_res[i] <- chisq_test(result)[1]
}
hist(chisq_res)
# original result: 1.3121
length(which(chisq_res >= 1.3121)) / 10000
?Multinomial
rmultinom(n = 1, size = 6, prob = rep(1/6, 6))
rmultinom(n = 1, size = sum(dat), prob = rep(1/6, 6))
expected <- sum(dat) / 6
expected
goodness_res[j] <-
(rmultinom(n = 1, size = sum(dat), prob = rep(1/6, 6)) - expected)^2 / expected
goodness_res <- vector(length = 10000)
expected <- sum(dat) / 6
goodness_res[1] <- rmultinom(n = 1, size = sum(dat), prob = rep(1/6, 6))
goodness_res[j] <-
(rmultinom(n = 1, size = sum(dat), prob = rep(1/6, 6)) - expected)^2 / expected
goodness_res[j] <-
(rmultinom(n = 1, size = sum(dat), prob = rep(1/6, 6)) - expected)^2 / expected
(rmultinom(n = 1, size = sum(dat), prob = rep(1/6, 6)) - expected)^2 / expected
goodness_res <- vector(length = 10000)
expected <- sum(dat) / 6
for(j in 1:10000) {
goodness_res[j] <- sum( (rmultinom(n = 1, size = sum(dat), prob = rep(1/6, 6)) - expected)^2 / expected )
}
hist(goodness_res)
p_val <- length(which(goodness_res >= 24.73)) / 10000
p_val
p_val <- length(which(goodness_res >= 24.73))
p_val
test <- sample(1:6, sum(dat), replace = TRUE)
str(test)
table(test)
str(table(test))
table(test)[1]
table(test)[6]
?log
#
#  sample(1:6, 317000, replace = TRUE)
#
#  Benford's Law: P(d) = log_10 (1 + 1/d)
#
benford <- log10(1 + 1/(1:9))
benford
library("openintro")
data
data(openintro)
library(devtools)
install_github("OpenIntroOrg/openintro-r-package", subdir = "openintro")
install_github("OpenIntroOrg/openintro-r-package", subdir = "OIdata")
library(openintro)
install_github("OpenIntroOrg/openintro-r-package", subdir = "openintro")
install_github("OpenIntroOrg/openintro-r-package", subdir = "openintro", force = TRUE)
data(books)
library(openintro)
data("openintro::books")
data("openintro:books")
data(openintro:books)
data(books, package = openintro)
?data
data(package = "openintro", books)
books
:w
str(books)
rm(books)
ls()
rm(list=ls())
getwd()
setwd("~/m1051/Lectures/RMD_Translation/Chapter04")
data(books)
load("books")
load("books.rda")
str(books)
head(books)
load("textbooks.rda")
textbooks
str(textbooks)
lapply(textbooks[, 4:5], FUN = sd)
lapply(textbooks[, c(4,5,7)], FUN = sd)
?round
?sample
?hist
mean(sd_vec)
sd_vec <- vector(length = 10000)
hist(sd_vec)
for(j in 1:10000) {
sd_vec[j] <- sd(sample(textbooks$diff, size = 73, replace = TRUE))
}
hist(sd_vec)
mean(sd_vec)
(14.26 - 1.9935*1.587)
(14.26 + 1.9935*1.587)
